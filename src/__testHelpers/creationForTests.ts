import { Drawing } from '../types';

export const getFirstElementId = (index: number): string => {
  return `Element-${index}`;
};

export const createDrawing = (text: string, primaryId: string): Drawing => {
  return {
    elements: [
      {
        type: 'rectangle',
        version: 338,
        versionNonce: 2005763643,
        isDeleted: false,
        id: primaryId,
        fillStyle: 'hachure',
        strokeWidth: 1,
        strokeStyle: 'solid',
        roughness: 1,
        opacity: 100,
        angle: 0,
        x: 578,
        y: 489,
        strokeColor: '#000000',
        backgroundColor: 'transparent',
        width: 111.99999999999996,
        height: 79.00000000000003,
        seed: 129174614,
        groupIds: [],
        roundness: null,
        boundElements: null,
        updated: 1,
        link: null,
        locked: false,
        index: null,
        frameId: null,
      },
      {
        type: 'text',
        version: 4,
        versionNonce: 1002402389,
        isDeleted: false,
        id: `${primaryId}-text`,
        fillStyle: 'hachure',
        strokeWidth: 1,
        strokeStyle: 'solid',
        roughness: 1,
        opacity: 100,
        angle: 0,
        x: 628.5,
        y: 507,
        strokeColor: '#000000',
        backgroundColor: 'transparent',
        width: 6,
        height: 45,
        seed: 2029939957,
        groupIds: [],
        roundness: null,
        boundElements: null,
        updated: 1,
        link: null,
        locked: false,
        index: null,
        frameId: null,
        fontSize: 36,
        fontFamily: 1,
        text,
        lineHeight: 1.25 as never,
        textAlign: 'center',
        verticalAlign: 'middle',
        containerId: null,
        originalText: text,
        autoResize: true,
      },
    ],
    appState: {
      contextMenu: null,
      showWelcomeScreen: false,
      isLoading: false,
      errorMessage: null,
      activeEmbeddable: null,
      newElement: null,
      resizingElement: null,
      multiElement: null,
      selectionElement: null,
      isBindingEnabled: true,
      startBoundElement: null,
      suggestedBindings: [],
      frameToHighlight: null,
      frameRendering: {
        enabled: false,
        name: false,
        outline: false,
        clip: false,
      },
      editingFrame: null,
      elementsToHighlight: null,
      editingTextElement: null,
      editingLinearElement: null,
      activeTool: {
        type: 'selection',
        locked: false,
        lastActiveTool: null,
        customType: null,
      },
      penMode: false,
      penDetected: false,
      exportBackground: true,
      exportEmbedScene: false,
      exportWithDarkMode: false,
      exportScale: 1,
      currentItemStrokeColor: '#000000',
      currentItemBackgroundColor: 'transparent',
      currentItemFillStyle: 'hachure',
      currentItemStrokeWidth: 1,
      currentItemStrokeStyle: 'solid',
      currentItemRoughness: 1,
      currentItemOpacity: 100,
      currentItemFontFamily: 1,
      currentItemFontSize: 36,
      currentItemTextAlign: 'left',
      currentItemStartArrowhead: null,
      currentItemEndArrowhead: 'arrow',
      currentHoveredFontFamily: null,
      currentItemRoundness: 'round',
      currentItemArrowType: 'sharp',
      viewBackgroundColor: '#ffffff',
      scrollX: -100.5,
      scrollY: -288,
      cursorButton: 'up',
      scrolledOutside: false,
      name: 'Untitled-2021-05-08-1402',
      isResizing: false,
      isRotating: false,
      zoom: {
        value: 1 as never,
      },
      openMenu: null,
      openPopup: null,
      openSidebar: null,
      openDialog: null,
      defaultSidebarDockedPreference: false,
      lastPointerDownWith: 'mouse',
      selectedElementIds: {},
      hoveredElementIds: {},
      previousSelectedElementIds: {},
      selectedElementsAreBeingDragged: false,
      shouldCacheIgnoreZoom: false,
      toast: null,
      zenModeEnabled: false,
      theme: 'light',
      gridSize: 20,
      gridStep: 5,
      gridModeEnabled: false,
      viewModeEnabled: false,
      selectedGroupIds: {},
      editingGroupId: null,
      width: 1312,
      height: 1297,
      offsetTop: 0,
      offsetLeft: 0,
      fileHandle: null,
      collaborators: new Map(),
      stats: { open: false, panels: 0 },
      currentChartType: 'bar',
      pasteDialog: { shown: false, data: null },
      pendingImageElementId: null,
      showHyperlinkPopup: false,
      selectedLinearElement: null,
      snapLines: [],
      originSnapOffset: null,
      objectsSnapModeEnabled: false,
      userToFollow: null,
      followedBy: new Set(),
      isCropping: false,
      croppingElementId: null,
      searchMatches: [],
    },
    files: null,
  };
};

export const createDrawings = (numberOfDrawings: number): Drawing[] => {
  const drawings: Drawing[] = [];
  for (let index = 1; index <= numberOfDrawings; index += 1) {
    drawings.push(createDrawing(index.toString(), getFirstElementId(index)));
  }
  return drawings;
};
